{
  "_args": [
    [
      {
        "raw": "xss@^1.0.6",
        "scope": null,
        "escapedName": "xss",
        "name": "xss",
        "rawSpec": "^1.0.6",
        "spec": ">=1.0.6 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\wardha\\graphql-server-example\\node_modules\\@apollographql\\graphql-playground-html"
    ]
  ],
  "_from": "xss@^1.0.6",
  "_hasShrinkwrap": false,
  "_id": "xss@1.0.8",
  "_location": "/xss",
  "_nodeVersion": "14.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/xss_1.0.8_1595816444930_0.06404189837375274"
  },
  "_npmUser": {
    "name": "leizongmin",
    "email": "leizongmin@gmail.com"
  },
  "_npmVersion": "6.14.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xss@^1.0.6",
    "scope": null,
    "escapedName": "xss",
    "name": "xss",
    "rawSpec": "^1.0.6",
    "spec": ">=1.0.6 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@apollographql/graphql-playground-html"
  ],
  "_resolved": "https://registry.npmjs.org/xss/-/xss-1.0.8.tgz",
  "_shasum": "32feb87feb74b3dcd3d404b7a68ababf10700535",
  "_shrinkwrap": null,
  "_spec": "xss@^1.0.6",
  "_where": "C:\\Users\\wardha\\graphql-server-example\\node_modules\\@apollographql\\graphql-playground-html",
  "author": {
    "name": "Zongmin Lei",
    "email": "leizongmin@gmail.com",
    "url": "http://ucdok.com"
  },
  "bin": {
    "xss": "./bin/xss"
  },
  "bugs": {
    "url": "https://github.com/leizongmin/js-xss/issues"
  },
  "contributors": [
    {
      "name": "Zongmin Lei",
      "email": "leizongmin@gmail.com",
      "url": "http://ucdok.com"
    }
  ],
  "dependencies": {
    "commander": "^2.20.3",
    "cssfilter": "0.0.10"
  },
  "description": "Sanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist",
  "devDependencies": {
    "browserify": "^16.5.1",
    "coveralls": "^3.1.0",
    "debug": "^4.1.1",
    "mocha": "^6.2.3",
    "nyc": "^15.1.0",
    "uglify-js": "^3.9.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3MgPdaXV8rfQ/pNn16Eio6VXYPTkqwa0vc7GkiymmY/DqR1SE/7VPAAVZz1GJsJFrllMYO3RHfEaiUGjab6TNw==",
    "shasum": "32feb87feb74b3dcd3d404b7a68ababf10700535",
    "tarball": "https://registry.npmjs.org/xss/-/xss-1.0.8.tgz",
    "fileCount": 16,
    "unpackedSize": 140538,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfHjn9CRA9TVsSAnZWagAAcwQP/1PYEKk9hXalI0NyLvxa\nlpS9lmkWatf3M75V2tiNRdC+eNJwEfTyuKHLgdCNdHZ1/0sLdVqcKBKGqqpX\n2ys9AsWLZLQreO+OBsme5qmUgB8/nijRBhvrHf3TS5larkItBxzbrIU7jhmg\nMHWkpWSVcc3Ag+k/Wl7OIMM8drlbDqIzKdTCCAj2Mz1CV8QSSFtKrh6IPAZy\nvMCjye7y9B64BoXk8W6nffi+elMQunDoAtgJcIcW5PKR5hd/gkQdY+snI6Qi\njr2RnZ4vxNwBtQp8w1KlxHgkBqJY0DnSGTYsk/Ihe/hvmdtN+PME26ZwD1VU\nMLzMuazca7tvuUgtM+YCs85KzpJ1D0dz1ZdtW3N8tdgArAYsJbsIlx9XRNUD\nCCj6ohm6wU56/ZU1pxnZvzy8rmljW2J0GgMfg4X2Y1DLDbZx18cPEh3UfgEY\nleBk7IxLtIPGJZ00E47fxDb0pd/Exieej/Ut9dSVzgupS0YD0pOdypKfPa+5\nxqdcqWt2U2ZuWWkWjUgrWPfdE89yuUQpUychCYbJrdcMyvpevDfvZit50nOO\nHtoozDD2XONBaqrXNoGyYTFA9djcyuWTxFg6O1PP2R5/aJrNelMkJVvDPshD\nYF0dAiH5MXf8MY4ZDwdHeLXJVcokkk/NGyUxtLFOl+YWt4+JtVHciWTuNPSz\n1XkB\r\n=ARjj\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "lib",
    "bin/xss",
    "dist",
    "typings/*.d.ts"
  ],
  "gitHead": "9cddd996ff32239ca8446c068aef4974584c7f2d",
  "homepage": "https://github.com/leizongmin/js-xss",
  "keywords": [
    "sanitization",
    "xss",
    "sanitize",
    "sanitisation",
    "input",
    "security",
    "escape",
    "encode",
    "filter",
    "validator",
    "html",
    "injection",
    "whitelist"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "leizongmin",
      "email": "leizongmin@gmail.com"
    }
  ],
  "name": "xss",
  "optionalDependencies": {},
  "readme": "[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![David deps][david-image]][david-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n[![npm license][license-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/xss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/xss\n[travis-image]: https://img.shields.io/travis/leizongmin/js-xss.svg?style=flat-square\n[travis-url]: https://travis-ci.org/leizongmin/js-xss\n[coveralls-image]: https://img.shields.io/coveralls/leizongmin/js-xss.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/leizongmin/js-xss?branch=master\n[david-image]: https://img.shields.io/david/leizongmin/js-xss.svg?style=flat-square\n[david-url]: https://david-dm.org/leizongmin/js-xss\n[node-image]: https://img.shields.io/badge/node.js-%3E=_0.10-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/xss.svg?style=flat-square\n[download-url]: https://npmjs.org/package/xss\n[license-image]: https://img.shields.io/npm/l/xss.svg\n\n# Sanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist.\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/leizongmin/js-xss.svg)](https://greenkeeper.io/)\n\n![xss](https://nodei.co/npm/xss.png?downloads=true&stars=true)\n\n---\n\n`xss` is a module used to filter input from users to prevent XSS attacks.\n([What is XSS attack?](http://en.wikipedia.org/wiki/Cross-site_scripting))\n\n**Project Homepage:** http://jsxss.com\n\n**Try Online:** http://jsxss.com/en/try.html\n\n**[中文版文档](https://github.com/leizongmin/js-xss/blob/master/README.zh.md)**\n\n---\n\n## Features\n\n* Specifies HTML tags and their attributes allowed with whitelist\n* Handle any tags or attributes using custom function.\n\n## Reference\n\n* [XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)\n* [Data URI scheme](http://en.wikipedia.org/wiki/Data_URI_scheme)\n* [XSS with Data URI Scheme](http://hi.baidu.com/badzzzz/item/bdbafe83144619c199255f7b)\n\n## Benchmark (for references only)\n\n* the xss module: 22.53 MB/s\n* `xss()` function from module `validator@0.3.7`: 6.9 MB/s\n\nFor test code please refer to `benchmark` directory.\n\n## They are using xss module\n\n* **nodeclub** - A Node.js bbs using MongoDB - https://github.com/cnodejs/nodeclub\n* **cnpmjs.org** - Private npm registry and web for Enterprise - https://github.com/cnpm/cnpmjs.org\n\n## Install\n\n### NPM\n\n```bash\nnpm install xss\n```\n\n### Bower\n\n```bash\nbower install xss\n```\n\nOr\n\n```bash\nbower install https://github.com/leizongmin/js-xss.git\n```\n\n## Usages\n\n### On Node.js\n\n```javascript\nvar xss = require(\"xss\");\nvar html = xss('<script>alert(\"xss\");</script>');\nconsole.log(html);\n```\n\n### On Browser\n\nShim mode (reference file `test/test.html`):\n\n```html\n<script src=\"https://rawgit.com/leizongmin/js-xss/master/dist/xss.js\"></script>\n<script>\n// apply function filterXSS in the same way\nvar html = filterXSS('<script>alert(\"xss\");</scr' + 'ipt>');\nalert(html);\n</script>\n```\n\nAMD mode - shim:\n\n```html\n<script>\nrequire.config({\n  baseUrl: './',\n  paths: {\n    xss: 'https://rawgit.com/leizongmin/js-xss/master/dist/xss.js'\n  },\n  shim: {\n    xss: {exports: 'filterXSS'}\n  }\n})\nrequire(['xss'], function (xss) {\n  var html = xss('<script>alert(\"xss\");</scr' + 'ipt>');\n  alert(html);\n});\n</script>\n```\n\n**Notes: please don't use the URL https://rawgit.com/leizongmin/js-xss/master/dist/xss.js in production environment.**\n\n## Command Line Tool\n\n### Process File\n\nYou can use the xss command line tool to process a file. Usage:\n\n```bash\nxss -i <input_file> -o <output_file>\n```\n\nExample:\n\n```bash\nxss -i origin.html -o target.html\n```\n\n### Active Test\n\nRun the following command, them you can type HTML\ncode in the command-line, and check the filtered output:\n\n```bash\nxss -t\n```\n\nFor more details, please run `$ xss -h` to see it.\n\n## Custom filter rules\n\nWhen using the `xss()` function, the second parameter could be used to specify\ncustom rules:\n\n```javascript\noptions = {}; // Custom rules\nhtml = xss('<script>alert(\"xss\");</script>', options);\n```\n\nTo avoid passing `options` every time, you can also do it in a faster way by\ncreating a `FilterXSS` instance:\n\n```javascript\noptions = {}; // Custom rules\nmyxss = new xss.FilterXSS(options);\n// then apply myxss.process()\nhtml = myxss.process('<script>alert(\"xss\");</script>');\n```\n\nDetails of parameters in `options` would be described below.\n\n### Whitelist\n\nBy specifying a `whiteList`, e.g. `{ 'tagName': [ 'attr-1', 'attr-2' ] }`. Tags\nand attributes not in the whitelist would be filter out. For example:\n\n```javascript\n// only tag a and its attributes href, title, target are allowed\nvar options = {\n  whiteList: {\n    a: [\"href\", \"title\", \"target\"]\n  }\n};\n// With the configuration specified above, the following HTML:\n// <a href=\"#\" onclick=\"hello()\"><i>Hello</i></a>\n// would become:\n// <a href=\"#\">Hello</a>\n```\n\nFor the default whitelist, please refer `xss.whiteList`.\n\n### Customize the handler function for matched tags\n\nBy specifying the handler function with `onTag`:\n\n```javascript\nfunction onTag(tag, html, options) {\n  // tag is the name of current tag, e.g. 'a' for tag <a>\n  // html is the HTML of this tag, e.g. '<a>' for tag <a>\n  // options is some addition informations:\n  //   isWhite    boolean, whether the tag is in whitelist\n  //   isClosing  boolean, whether the tag is a closing tag, e.g. true for </a>\n  //   position        integer, the position of the tag in output result\n  //   sourcePosition  integer, the position of the tag in input HTML source\n  // If a string is returned, the current tag would be replaced with the string\n  // If return nothing, the default measure would be taken:\n  //   If in whitelist: filter attributes using onTagAttr, as described below\n  //   If not in whitelist: handle by onIgnoreTag, as described below\n}\n```\n\n### Customize the handler function for attributes of matched tags\n\nBy specifying the handler function with `onTagAttr`:\n\n```javascript\nfunction onTagAttr(tag, name, value, isWhiteAttr) {\n  // tag is the name of current tag, e.g. 'a' for tag <a>\n  // name is the name of current attribute, e.g. 'href' for href=\"#\"\n  // isWhiteAttr whether the attribute is in whitelist\n  // If a string is returned, the attribute would be replaced with the string\n  // If return nothing, the default measure would be taken:\n  //   If in whitelist: filter the value using safeAttrValue as described below\n  //   If not in whitelist: handle by onIgnoreTagAttr, as described below\n}\n```\n\n### Customize the handler function for tags not in the whitelist\n\nBy specifying the handler function with `onIgnoreTag`:\n\n```javascript\nfunction onIgnoreTag(tag, html, options) {\n  // Parameters are the same with onTag\n  // If a string is returned, the tag would be replaced with the string\n  // If return nothing, the default measure would be taken (specifies using\n  // escape, as described below)\n}\n```\n\n### Customize the handler function for attributes not in the whitelist\n\nBy specifying the handler function with `onIgnoreTagAttr`:\n\n```javascript\nfunction onIgnoreTagAttr(tag, name, value, isWhiteAttr) {\n  // Parameters are the same with onTagAttr\n  // If a string is returned, the value would be replaced with this string\n  // If return nothing, then keep default (remove the attribute)\n}\n```\n\n### Customize escaping function for HTML\n\nBy specifying the handler function with `escapeHtml`. Following is the default\nfunction **(Modification is not recommended)**:\n\n```javascript\nfunction escapeHtml(html) {\n  return html.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n```\n\n### Customize escaping function for value of attributes\n\nBy specifying the handler function with `safeAttrValue`:\n\n```javascript\nfunction safeAttrValue(tag, name, value) {\n  // Parameters are the same with onTagAttr (without options)\n  // Return the value as a string\n}\n```\n\n### Customize CSS filter\n\nIf you allow the attribute `style`, the value will be processed by [cssfilter](https://github.com/leizongmin/js-css-filter) module. The cssfilter module includes a default css whitelist. You can specify the options for cssfilter module like this:\n\n```javascript\nmyxss = new xss.FilterXSS({\n  css: {\n    whiteList: {\n      position: /^fixed|relative$/,\n      top: true,\n      left: true\n    }\n  }\n});\nhtml = myxss.process('<script>alert(\"xss\");</script>');\n```\n\nIf you don't want to filter out the `style` content, just specify `false` to the `css` option:\n\n```javascript\nmyxss = new xss.FilterXSS({\n  css: false\n});\n```\n\nFor more help, please see https://github.com/leizongmin/js-css-filter\n\n### Quick Start\n\n#### Filter out tags not in the whitelist\n\nBy using `stripIgnoreTag` parameter:\n\n* `true` filter out tags not in the whitelist\n* `false`: by default: escape the tag using configured `escape` function\n\nExample:\n\nIf `stripIgnoreTag = true` is set, the following code:\n\n```html\ncode:<script>alert(/xss/);</script>\n```\n\nwould output filtered:\n\n```html\ncode:alert(/xss/);\n```\n\n#### Filter out tags and tag bodies not in the whitelist\n\nBy using `stripIgnoreTagBody` parameter:\n\n* `false|null|undefined` by default: do nothing\n* `'*'|true`: filter out all tags not in the whitelist\n* `['tag1', 'tag2']`: filter out only specified tags not in the whitelist\n\nExample:\n\nIf `stripIgnoreTagBody = ['script']` is set, the following code:\n\n```html\ncode:<script>alert(/xss/);</script>\n```\n\nwould output filtered:\n\n```html\ncode:\n```\n\n#### Filter out HTML comments\n\nBy using `allowCommentTag` parameter:\n\n* `true`: do nothing\n* `false` by default: filter out HTML comments\n\nExample:\n\nIf `allowCommentTag = false` is set, the following code:\n\n```html\ncode:<!-- something --> END\n```\n\nwould output filtered:\n\n```html\ncode: END\n```\n\n## Examples\n\n### Allow attributes of whitelist tags start with `data-`\n\n```javascript\nvar source = '<div a=\"1\" b=\"2\" data-a=\"3\" data-b=\"4\">hello</div>';\nvar html = xss(source, {\n  onIgnoreTagAttr: function(tag, name, value, isWhiteAttr) {\n    if (name.substr(0, 5) === \"data-\") {\n      // escape its value using built-in escapeAttrValue function\n      return name + '=\"' + xss.escapeAttrValue(value) + '\"';\n    }\n  }\n});\n\nconsole.log(\"%s\\nconvert to:\\n%s\", source, html);\n```\n\nResult:\n\n```html\n<div a=\"1\" b=\"2\" data-a=\"3\" data-b=\"4\">hello</div>\nconvert to:\n<div data-a=\"3\" data-b=\"4\">hello</div>\n```\n\n### Allow tags start with `x-`\n\n```javascript\nvar source = \"<x><x-1>he<x-2 checked></x-2>wwww</x-1><a>\";\nvar html = xss(source, {\n  onIgnoreTag: function(tag, html, options) {\n    if (tag.substr(0, 2) === \"x-\") {\n      // do not filter its attributes\n      return html;\n    }\n  }\n});\n\nconsole.log(\"%s\\nconvert to:\\n%s\", source, html);\n```\n\nResult:\n\n```html\n<x><x-1>he<x-2 checked></x-2>wwww</x-1><a>\nconvert to:\n&lt;x&gt;<x-1>he<x-2 checked></x-2>wwww</x-1><a>\n```\n\n### Parse images in HTML\n\n```javascript\nvar source =\n  '<img src=\"img1\">a<img src=\"img2\">b<img src=\"img3\">c<img src=\"img4\">d';\nvar list = [];\nvar html = xss(source, {\n  onTagAttr: function(tag, name, value, isWhiteAttr) {\n    if (tag === \"img\" && name === \"src\") {\n      // Use the built-in friendlyAttrValue function to escape attribute\n      // values. It supports converting entity tags such as &lt; to printable\n      // characters such as <\n      list.push(xss.friendlyAttrValue(value));\n    }\n    // Return nothing, means keep the default handling measure\n  }\n});\n\nconsole.log(\"image list:\\n%s\", list.join(\", \"));\n```\n\nResult:\n\n```html\nimage list:\nimg1, img2, img3, img4\n```\n\n### Filter out HTML tags (keeps only plain text)\n\n```javascript\nvar source = \"<strong>hello</strong><script>alert(/xss/);</script>end\";\nvar html = xss(source, {\n  whiteList: [], // empty, means filter out all tags\n  stripIgnoreTag: true, // filter out all HTML not in the whitelist\n  stripIgnoreTagBody: [\"script\"] // the script tag is a special case, we need\n  // to filter out its content\n});\n\nconsole.log(\"text: %s\", html);\n```\n\nResult:\n\n```html\ntext: helloend\n```\n\n## License\n\n```text\nCopyright (c) 2012-2018 Zongmin Lei(雷宗民) <leizongmin@gmail.com>\nhttp://ucdok.com\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/leizongmin/js-xss.git"
  },
  "scripts": {
    "build": "./bin/build",
    "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "prepublish": "npm run test && npm run build",
    "test": "export DEBUG=xss:* && mocha -t 5000",
    "test-cov": "nyc --reporter=lcov mocha --exit \"test/*.js\" && nyc report"
  },
  "typings": "./typings/xss.d.ts",
  "version": "1.0.8"
}
